
;; Post Mode
;; Download http://sourceforge.net/p/post-mode/code/ci/master/tree/post.el?format=raw
;; and put in the autoload directory

;; This is required before loading evil
;; and allows CTRL-r to work (redo)
(load "~/wa/git/evil/lib/undo-tree")
(require 'undo-tree)

;; Set up evil to be in the path
;; This is just a checked out version from git
(add-to-list 'load-path "~/wa/git/evil")

;; Make CTRL - u scroll up like I'm used to in vi
;; This seems to be off by default
(setq evil-want-C-u-scroll t)
(setq evil-shift-width 4) ;; not sure what the default is here
;(setq evil-search-module 'evil-search) ;; vim like search behavior, but can't tell a difference, doesn't seem to be working
(require 'evil)
;; Load evil by default
(evil-mode 1)

;; Drop one-off scripts into this directory
(add-to-list 'load-path "~/.emacs.d/autoload")

;; Other options
(setq vc-follow-symlinks nil)

(setq backup-directory-alist '(("." . "~/backup/emacs")))

;; TODO: gnu global setup
;; TODO: Load the .el file out if the $HOME/install dir

;; Protobuf syntax highlighting
(autoload 'protobuf-mode "protobuf-mode" "Major mode for editing protobuf defitinion." t)
(add-to-list 'auto-mode-alist '("\\.proto$" . protobuf-mode))

;; mutt composition mode
(autoload 'post-mode "post" "mode for e-mail" t)
(add-to-list 'auto-mode-alist
	     '("\\.*mutt-*\\|.article\\|\\.followup"
	       . post-mode))

;; TODO: need to add some git modes (commits, rebase, etc...)
;; check out https://github.com/magit/git-modes

(require 'cmake-mode)
(setq auto-mode-alist
      (append '(("CMakeLists\\.txt\\'" . cmake-mode)
		("\\.cmake\\'" . cmake-mode))
	      auto-mode-alist))

;; Create my personal style. (from the manual)
;; I think this actually works how I like it!!
(defconst my-c-style
  '((c-tab-always-indent        . t)
    (c-comment-only-line-offset . 0)
    ;(c-comment-only-line-offset . 4)
    (c-hanging-braces-alist     . ((substatement-open after)
                                   (brace-list-open)))
    (c-hanging-colons-alist     . ((member-init-intro before)
                                   (inher-intro)
                                   (case-label after)
                                   (label after)
                                   (access-label after)))
    (c-cleanup-list             . (scope-operator
                                   empty-defun-braces
                                   defun-close-semi))
    ;(c-offsets-alist            . ((arglist-close . c-lineup-arglist)
    (c-offsets-alist            . ((arglist-close . c-lineup-close-paren)
                                   (substatement-open . 0)
                                   (case-label        . 4)
                                   (block-open        . 0)
				   (innamespace       . [0]) ; don't indent inside of namespaces
                                   (knr-argdecl-intro . -)))
    (c-echo-syntactic-information-p . t))
  "My C Programming Style")
(c-add-style "PERSONAL" my-c-style)

;; Customizations for all modes in CC Mode.
(defun my-c-mode-common-hook ()
  ;; set my personal style for the current buffer
  (c-set-style "PERSONAL")
  ;; other customizations
  ;;(setq tab-width 8
  (setq tab-width 4
        ;; this will make sure spaces are used instead of tabs
        indent-tabs-mode nil)
        ;;indent-tabs-mode t)
  ;; we like auto-newline, but not hungry-delete
  ;; these are all the cc-mode minor modes
  ;;(c-toggle-electric-state -1)
  ;;(c-toggle-auto-newline -1) ;; don't insert newlines when entering a semicolon (default)
  ;;(c-toggle-hungry-state 1) ;; weird... would be nice to go back the tab amount, but not newlines
  ;;(c-toggle-auto-hungry-state -1)
  ;;(c-toggle-syntactic-indentation 1)

  ;; Make return indent the new line
  ;; But, this doesn't clean up abandoned indents
  ;;(define-key c-mode-base-map "\C-m" 'c-context-line-break)
)
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

;; Clean indent
;; indent on return but don't leave trailing whitespace
(add-to-list 'load-path "~/wa/git/clean-aindent")
(require 'clean-aindent)

;; Whitespace settings
;; Highlight trailing whitespace
(setq-default show-trailing-whitespace t)
;; set up key combo to show whitespace chars
;; This was initially f10, but that's mapped to the menu, use f9
(define-key evil-normal-state-map (kbd "<f9>") 'whitespace-mode)

;; Reformat text (ported from vim config)
;; I like fill-paragraph better than vim's reformat (better suited to text)
;; and I don't use "R" (replace) mode in vim apparently
(define-key evil-normal-state-map (kbd "R") 'fill-paragraph)


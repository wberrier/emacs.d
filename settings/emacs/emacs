;; -*-Lisp-*-
;; Modeline must be the first thing in the file
;; Set mode, since this file is controlled in git as "emacs" instead of ".emacs"
;; Interesting that this didn't happen automatically...

;; This is required before loading evil
;; and allows CTRL-r to work (redo)
(load "~/wa/git/evil/lib/undo-tree")
(require 'undo-tree)

;; Set up evil to be in the path
;; This is just a checked out version from git
(add-to-list 'load-path "~/wa/git/evil")

;; Make CTRL - u scroll up like I'm used to in vi
;; This seems to be off by default
(setq evil-want-C-u-scroll t)
(setq evil-shift-width 4) ;; not sure what the default is here
(setq evil-search-module 'evil-search)
; treat underscore as a word char, finally! (for 'w' and searching)
(add-hook 'c-mode-common-hook #'(lambda () (modify-syntax-entry ?_ "w")))
(require 'evil)
;; Load evil by default
(evil-mode 1)

; great built in color theme
(load-theme 'wombat t)

;; Nice monokai color theme
; seems to only work in 256 color mode
;(add-to-list 'custom-theme-load-path "~/wa/git/monokai-emacs")
;(load-theme 'monokai t)

;(add-to-list 'custom-theme-load-path "~/wa/git/zenburn-emacs")
; seems to only work in 256 color mode, but has a nice 8 color fallback option
;(load-theme 'zenburn t)

;; Drop one-off scripts into this directory
(add-to-list 'load-path "~/.emacs.d/autoload")

;; Other options
(setq vc-follow-symlinks nil)

(setq backup-directory-alist '(("." . "~/backup/emacs")))

;; Save place in files when visiting
(require 'saveplace)
(setq-default save-place t)
(setq save-place-file "~/.emacs.d/saved-places")

;; gnu global setup
;; NOTE: keep the cscope vim keyboard bindings so I can still move between the two
;; note: there's also xcscope.el, which some say they like the best.  There's also ggtags.el.
(setq dist (substring (shell-command-to-string "~/bin/get_dist") 0 -1)) ; removes trailing newline
(add-to-list 'load-path (format "~/install/%s/share/gtags" dist))
(autoload 'gtags-mode "gtags" "" t)

; Set up key bindings for gtags
(define-key evil-normal-state-map (kbd "\C-]") 'gtags-find-tag-from-here)
(define-key evil-normal-state-map (kbd "\C-t") 'gtags-pop-stack)

; Set up some keybindings for the cscope interaction
; although, it doesn't grab the current expression under the curson :(
; could write the equivalent "-from-here" functions...
; I guess this is where the shortcomings begin?
; but, it automatically puts the current symbol in the interactive buffer
; TODO: any way to automatically press enter?
; NOTE: not exactly sure what the difference is for some of these
(define-key evil-normal-state-map (kbd "\C-\\ s") 'gtags-find-symbol)
(define-key evil-normal-state-map (kbd "\C-\\ g") 'gtags-find-tag) ; different than gtags-find-tag-from-here! huh?
(define-key evil-normal-state-map (kbd "\C-\\ c") 'gtags-find-rtag)
(define-key evil-normal-state-map (kbd "\C-\\ t") 'gtags-find-pattern) ; same as gtags-find-with-grep
(define-key evil-normal-state-map (kbd "\C-\\ e") 'gtags-find-with-grep)
(define-key evil-normal-state-map (kbd "\C-\\ f") 'gtags-find-file)
;(define-key evil-normal-state-map (kbd "\C-\\ i") ')
;(define-key evil-normal-state-map (kbd "\C-\\ d") ')

;; Allow "RET" to work in gtags-select-mode when running under evil
(defun intercept-evil-ret ()
  (interactive) ;; huh?
  (if (eq major-mode 'gtags-select-mode) (gtags-select-tag) (evil-ret))
  )
(define-key evil-motion-state-map (kbd "RET") 'intercept-evil-ret)

;; Protobuf syntax highlighting
(autoload 'protobuf-mode "protobuf-mode" "Major mode for editing protobuf defitinion." t)
(add-to-list 'auto-mode-alist '("\\.proto$" . protobuf-mode))

;; Post Mode
;; Download http://sourceforge.net/p/post-mode/code/ci/master/tree/post.el?format=raw
;; and put in the autoload directory
;; mutt composition mode
(autoload 'post-mode "post" "mode for e-mail" t)
(add-to-list 'auto-mode-alist
	     '("\\.*mutt-*\\|.article\\|\\.followup"
	       . post-mode))
(defun my-post-mode-hook ()
  (flyspell-mode)
  )
(add-hook 'post-mode-hook 'my-post-mode-hook)

;; git-modes: https://github.com/magit/git-modes
(add-to-list 'load-path "~/wa/git/git-modes")
(require 'gitattributes-mode)
(require 'git-commit-mode)
(require 'gitconfig-mode)
(require 'gitignore-mode)
; (require 'git-rebase-mode) ;; doesn't work well with evil

(require 'cmake-mode)
(setq auto-mode-alist
      (append '(("CMakeLists\\.txt\\'" . cmake-mode)
		("\\.cmake\\'" . cmake-mode))
	      auto-mode-alist))

;; Create my personal style. (from the manual)
;; I think this actually works how I like it!!

(defconst my-c-style
  '((c-tab-always-indent        . t)
    (c-comment-only-line-offset . 0)
    ;(c-comment-only-line-offset . 4)
    (c-hanging-braces-alist     . ((substatement-open after)
                                   (brace-list-open)))
    (c-hanging-colons-alist     . ((member-init-intro before)
                                   (inher-intro)
                                   (case-label after)
                                   (label after)
                                   (access-label after)))
    (c-cleanup-list             . (scope-operator
                                   empty-defun-braces
                                   defun-close-semi))
    ;(c-offsets-alist            . ((arglist-close . c-lineup-arglist)
    (c-offsets-alist            . ((arglist-close . c-lineup-close-paren)
                                   (substatement-open . 0)
                                   (case-label        . 4)
                                   (block-open        . 0)
				   (innamespace       . [0]) ; don't indent inside of namespaces
                                   (knr-argdecl-intro . -)))
    (c-echo-syntactic-information-p . t))
  "My C Programming Style")
(c-add-style "PERSONAL" my-c-style)

;; Customizations for all modes in CC Mode.
(defun my-c-mode-common-hook ()
  ;; set my personal style for the current buffer
  (c-set-style "PERSONAL")
  ;; other customizations
  ;;(setq tab-width 8
  (setq tab-width 4
        ;; this will make sure spaces are used instead of tabs
        indent-tabs-mode nil)
        ;;indent-tabs-mode t)
  ;; we like auto-newline, but not hungry-delete
  ;; these are all the cc-mode minor modes
  ;;(c-toggle-electric-state -1)
  ;;(c-toggle-auto-newline -1) ;; don't insert newlines when entering a semicolon (default)
  ;;(c-toggle-hungry-state 1) ;; weird... would be nice to go back the tab amount, but not newlines
  ;;(c-toggle-auto-hungry-state -1)
  ;;(c-toggle-syntactic-indentation 1)

  ;; Make return indent the new line
  ;; But, this doesn't clean up abandoned indents
  ;;(define-key c-mode-base-map "\C-m" 'c-context-line-break)

  ; compile command for this mode
  (setq compile-command "cmake_build")

  ;; enable gnu global in cc mode
  (gtags-mode 1)
)
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

;; Clean indent
;; indent on return but don't leave trailing whitespace
(add-to-list 'load-path "~/wa/git/clean-aindent")
(require 'clean-aindent-mode)

;; Whitespace settings
;; Highlight trailing whitespace
(setq-default show-trailing-whitespace t)
;; set up key combo to show whitespace chars
;; This was initially f10, but that's mapped to the menu, use f9
(define-key evil-normal-state-map (kbd "<f9>") 'whitespace-mode)

;; Compile options
;(setq-default compilation-read-command nil) ;; don't prompt for command
(setq-default compilation-scroll-output 'first-error) ;; scroll until the first error
;(setq-default compilation-scroll-output t) ;; scroll to the end

(defun bookmark-then-compile ()
  (interactive)
  (bookmark-set "compile-bookmark") ; set a bookmark to easily return to
  (compile compile-command) ; command set by the mode
  )
(define-key evil-normal-state-map (kbd "<f7>") 'bookmark-then-compile)
;(define-key evil-normal-state-map (kbd "<f7>") 'compile)

(defun jump-to-compile-bookmark ()
  (interactive)
  (bookmark-jump "compile-bookmark") ; set a bookmark to easily return to
  )
(define-key evil-normal-state-map (kbd "<f8>") 'jump-to-compile-bookmark)

;; Reformat text (ported from vim config)
;; I like fill-paragraph better than vim's reformat (better suited to text)
;; and I don't use "R" (replace) mode in vim apparently
(define-key evil-normal-state-map (kbd "R") 'fill-paragraph)


#!/usr/bin/env python3

"""Run a build according to a config file"""

import os
import os.path
import sys
import emacsproject.config
import emacsproject.common
#import pprint

# Example config file: (.emacs_project.json)
#{
#	"build": {
#		"debug": {
#			"command": "make -j@NUM_CORES_TO_USE@ debug_target",
#			"working_dir": "build-debug"
#		}
#	}
#}

def get_proc_count():
    """ Get number of processors """
    if 'NUM_CORES_TO_USE' in os.environ:
        return int(os.environ['NUM_CORES_TO_USE'])

    count = 1
    for line in open("/proc/cpuinfo").readlines():
        if line.startswith("processor"):
            count += 1

    return count

def main():
    """main"""

    # Default build type
    build_type = "release"

    if len(sys.argv) > 1:
        build_type = sys.argv[1]

    config_dir = emacsproject.config.get_config_dir()

    if config_dir == "":
        print("Unable to find " + emacsproject.config.FILENAME)
        return 1

    num_procs = get_proc_count()

    # Read config file
    config = emacsproject.config.load_json_file(config_dir + os.sep + emacsproject.config.FILENAME)
    #pprint.pprint(config)

    # get command and replace core count
    command = config['build'][build_type]['command']
    working_dir = config_dir + os.path.sep + config['build'][build_type].get('working_dir', '.')
    command = command.replace("@NUM_CORES_TO_USE@", str(num_procs))

    if 'env' in config['build'][build_type]:
        env = config['build'][build_type]['env']
        emacsproject.common.print_environment(env)
        emacsproject.common.set_environment(env)

    # Print out directory for emacs benefit (compilation-mode)
    # (it's expecting 'make' to be used, which prints out in this format)
    print("Entering directory `%s'" % working_dir)
    print("Command: " + command)
    #sys.exit(1)

    # Run command
    os.chdir(working_dir)
    return os.WEXITSTATUS(os.system(command))

if __name__ == "__main__":
    sys.exit(main())

#!/bin/bash -x

# TODO: bunch of commands in here that don't live in this repo...

# Easy way to check distros...

function is_redhat () {
    type yum > /dev/null 2>&1
}

function is_debian () {
    type apt-get > /dev/null 2>&1
}

# Package list
if is_redhat ; then
    CPP_PACKAGES="clang-tools-extra"
    PYTHON_PACKAGES="python3-pip"
    GOLANG_PACKAGES="golang-bin"
    RUSTC_PACKAGE="rust"
    RUST_PACKAGES="$RUSTC_PACKAGE rust-src cargo clippy rustfmt"
    LUA_PACKAGES="luarocks lua-devel"
    LSP_PACKAGES="npm"
    BASH_PACKAGES="shfmt"

    PIP_ARGS=""
elif is_debian ; then
    CPP_PACKAGES="clangd"
    PYTHON_PACKAGES="python3-pip"
    GOLANG_PACKAGES="golang-go"
    RUSTC_PACKAGE="rustc"
    RUST_PACKAGES="$RUSTC_PACKAGE rust-src cargo rust-clippy rustfmt"
    LUA_PACKAGES="luarocks"
    LSP_PACKAGES="npm"
    BASH_PACKAGES="shfmt"

    PIP_ARGS="--break-system-packages"
else
    echo "Unsupported platform"
fi

function install_packages() {
    if is_redhat ; then
        sudo yum install -y "$@"
    elif is_debian ; then
        sudo apt-get install -y "$@"
    else
        echo "unsupported platform"
    fi
}

function remove_packages() {
    if is_redhat ; then
        sudo yum remove -y "$@"
    elif is_debian ; then
        sudo apt-get remove --purge -y "$@"
    else
        echo "unsupported platform"
    fi
}

function list_package_contents() {
    if is_redhat ; then
        rpm -ql "$@"
    elif is_debian ; then
        dpkg -L "$@"
    else
        echo "unsupported platform"
    fi
}

# c++
function lsp_cpp () {
    install_packages $CPP_PACKAGES
}

# python
function lsp_python () {
    install_packages $PYTHON_PACKAGES

    # TODO: certificates

    # Language server
    pip3 install $PIP_ARGS --user python-lsp-server
    # plugins
    pip3 install $PIP_ARGS --user flake8 mypy pylsp-mypy # static type checking, python 3 only

    # also install debug server
    pip3 install $PIP_ARGS --user debugpy

}

# Go
function lsp_go () {
    install_packages $GOLANG_PACKAGES

    go install golang.org/x/tools/gopls@latest
}

# Java
function lsp_java () {
    if [ ! -e ~/.emacs.d/eclipse.jdt.ls/server ] ; then
        rm -f /tmp/jdt-latest.tar
        # NOTE: can't use -c because this file changes
        wget http://download.eclipse.org/jdtls/snapshots/jdt-language-server-latest.tar.gz -O /tmp/jdt-latest.tar
        mkdir -p ~/.emacs.d/eclipse.jdt.ls/server/
        tar xf /tmp/jdt-latest.tar -C ~/.emacs.d/eclipse.jdt.ls/server/
        rm -f /tmp/jdt-latest.tar
    else
        echo "Java LS already installed, update inside emacs with M-x lsp-java-update-server"
    fi
}

function meets_minimum_version() {
    minimum_version="$1"
    current_version="$2"

    older_version=$(echo -e "$minimum_version\n$current_version" | sort --version-sort | head -n1)

    if [ "$minimum_version" = "$older_version" ] ; then
        return 0
    else
        return 1
    fi
}

function rustc_from_package() {
    list_package_contents $RUSTC_PACKAGE | grep "bin/rustc"
}

function minimum_rust_version() {
    rustc=$(rustc_from_package)

    meets_minimum_version "1.65.0" "$($rustc --version | awk '{print $2}')"
}

# Rust
function lsp_rust () {
    source $HOME/.cargo/env
    install_packages $RUST_PACKAGES

    # If rust from the package manager meets the minimum, remove rustup toolchains
    if minimum_rust_version ; then
        # remove rustup toolchains (if any)
        rustup toolchain list | awk '{print $1}' | xargs rustup toolchain remove
    else
        # Otherwise, remove the system rust...
        remove_packages $RUST_PACKAGES

        # and install with rustup
        curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path
        rustup toolchain install stable
        rustup default stable
    fi

    pushd ~/wa/git
        if [ ! -e rust-analyzer ] ; then
            git clone https://github.com/rust-analyzer/rust-analyzer.git
        fi

        pushd rust-analyzer
            # Grab the latest release
            analyzer_branch="release"
            git fetch -pa
            git checkout $analyzer_branch
            git rebase origin/${analyzer_branch}
            cargo xtask install --server
        popd

    popd
}

# Lua
function lsp_lua () {
    install_packages $LUA_PACKAGES

    # Install as user or root?

    luarocks install --local --server=http://luarocks.org/dev lua-lsp

    # Install some other helpers
    luarocks install --local luacheck

    # These depend on the version of lua, just install both
    luarocks install --local Formatter # 5.1 and 5.4 only
    luarocks install --local lcf
}

function lsp_installer_helpers () {
    install_packages $LSP_PACKAGES
}
}

# Run each section
lsp_cpp
lsp_python
lsp_go
lsp_java
lsp_rust
lsp_lua # broken on f32 in Oct 2020
lsp_installer_helpers

# NOTE: lsp-mode has internal/automatic support for npm based language servers:
# ie: m-x lsp-install-server <ret> bash <ret>

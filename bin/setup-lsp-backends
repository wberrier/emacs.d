#!/bin/bash -x

source "$(dirname "$(readlink -f "$0")")/lib/os-common.sh"
source "$(dirname "$(readlink -f "$0")")/lib/vcs-common.sh"
source "$(dirname "$(readlink -f "$0")")/lib/version-common.sh"

# Package list
case $(get_dist) in
Fedora*)
	CPP_PACKAGES="clang-tools-extra"
	PYTHON_PACKAGES="pipx"
	GOLANG_PACKAGES="golang-bin"
	RUSTC_PACKAGE="rust"
	RUST_PACKAGES="$RUSTC_PACKAGE rust-src cargo clippy rustfmt"
	LUA_PACKAGES="luarocks lua-devel"
	LSP_PACKAGES="npm"
	BASH_PACKAGES="shfmt"
	;;
Debian* | Ubuntu*)
	CPP_PACKAGES="clangd"
	PYTHON_PACKAGES="pipx"
	GOLANG_PACKAGES="golang-go"
	RUSTC_PACKAGE="rustc"
	RUST_PACKAGES="$RUSTC_PACKAGE rust-src cargo rust-clippy rustfmt"
	LUA_PACKAGES="luarocks"
	LSP_PACKAGES="npm"
	BASH_PACKAGES="shfmt"
	;;
esac

# c++
lsp_cpp() {
	install_packages $CPP_PACKAGES
}

# python
lsp_python() {
	install_packages $PYTHON_PACKAGES

	# Language server
	install_python_app python-lsp-server
	# plugins
	add_python_packages python-lsp-server flake8 mypy pylsp-mypy # static type checking, python 3 only
	add_python_packages python-lsp-server pycodestyle

	# also install debug server
	add_python_packages python-lsp-server debugpy
}

# Go
lsp_go() {
	install_packages $GOLANG_PACKAGES

	go install golang.org/x/tools/gopls@latest
}

# Java
lsp_java() {
	if [ ! -e ~/.emacs.d/eclipse.jdt.ls/server ]; then
		rm -f /tmp/jdt-latest.tar
		# NOTE: can't use -c because this file changes
		wget http://download.eclipse.org/jdtls/snapshots/jdt-language-server-latest.tar.gz -O /tmp/jdt-latest.tar
		mkdir -p ~/.emacs.d/eclipse.jdt.ls/server/
		tar xf /tmp/jdt-latest.tar -C ~/.emacs.d/eclipse.jdt.ls/server/
		rm -f /tmp/jdt-latest.tar
	else
		echo "Java LS already installed, update inside emacs with M-x lsp-java-update-server"
	fi
}

minimum_rust_version() {
	remote_version=$(remote_package_version "$RUSTC_PACKAGE")

	version_is_less_than "1.65.0" "$remote_version"
}

rustup_installed() {
	type rustup >/dev/null 2>&1
}

# Rust
lsp_rust() {
	source $HOME/.cargo/env

	# If rust from the package manager meets the minimum, install it
	# and remove rustup toolchains
	if minimum_rust_version; then
		install_packages $RUST_PACKAGES

		# remove rustup and toolchains (if any)
		rustup_installed && rustup self uninstall -y

	else
		# Otherwise, remove the system rust...
		remove_packages $RUST_PACKAGES

		# and install with rustup
		curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path
		rustup toolchain install stable
		rustup default stable
	fi

	pushd ~/wa/git
	analyzer_branch="release"
	clone_or_update_git_repo https://github.com/rust-analyzer/rust-analyzer.git "$analyzer_branch"

	pushd rust-analyzer
	cargo xtask install --server
	popd

	popd
}

# Lua
lsp_lua() {
	install_packages $LUA_PACKAGES

	# Install as user or root?

	luarocks install --local --server=http://luarocks.org/dev lua-lsp

	# Install some other helpers
	luarocks install --local luacheck

	# These depend on the version of lua, just install both
	luarocks install --local Formatter # 5.1 and 5.4 only
	luarocks install --local lcf
}

lsp_installer_helpers() {
	install_packages $LSP_PACKAGES
}

lsp_bash() {
	# shfmt not lsp related, but we do use shfmt-mode
	install_packages $BASH_PACKAGES
}

# Run each section
lsp_cpp
lsp_python
lsp_go
lsp_java
lsp_rust
lsp_lua # broken on f32 in Oct 2020
lsp_installer_helpers
lsp_bash

# NOTE: lsp-mode has internal/automatic support for npm based language servers:
# ie: m-x lsp-install-server <ret> bash <ret>
